////
/// @group o-ft-icons
/// @link http://registry.origami.ft.com/components/o-ft-icons
////

/// Generate an aggregated list of selectors for an icon
///
/// @param {String} icon
@function oFtIconsGetSelectors($icon) {
	$aggregated-selector: ();
	$aggregated-selector: append($aggregated-selector, unquote('%o-ft-icons-#{$icon}'), comma);
	@if ($o-ft-icons-is-silent == false) {
		$aggregated-selector: append($aggregated-selector, unquote('.o-ft-icons-#{$icon}'), comma);
	}
	@return $aggregated-selector;
}

@mixin oFtIconsFontFace() {
	@if ($_o-ft-icons-font-face-already-output == false) {
		$_o-ft-icons-font-face-already-output: true !global;

		@font-face {
			font-family: $_o-ft-icons-font-name;
			src: url(oAssetsResolve($_o-ft-icons-font-file-name + ".eot", o-ft-icons));
			src: url(oAssetsResolve($_o-ft-icons-font-file-name + ".eot?#iefix", o-ft-icons)) format("embedded-opentype"),
				url(oAssetsResolve($_o-ft-icons-font-file-name + ".woff", o-ft-icons)) format("woff"),
				url(oAssetsResolve($_o-ft-icons-font-file-name + ".ttf", o-ft-icons)) format("truetype");
			font-weight: normal;
			font-style: normal;
		}
	}
}

/// Base styles for all icons
@mixin oFtIconsBaseIconStyles() {
	font-family: $_o-ft-icons-font-name;
	display: inline-block;
	vertical-align: middle;
	// These are marked as !important as the icon font is not designed to be used with faux bold or faux italic styles
	// If bolder versions of an icon are required a new SVG should be designed and added to the icon font
	// scss-lint:disable ImportantRule
	font-weight: normal !important;
	font-style: normal !important;
	speak: none;
	text-decoration: inherit;
	text-transform: none;
	text-rendering: optimizeLegibility;
	// scss-lint:disable VendorPrefix VendorPrefixes
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

/// Placeholder (and optionally concrete class) for individual icon (modern browsers)
///
/// @access private
///
/// @param {String} $icon-class
/// @param {String} $character-code - Unicode character code (e.g. f101)
/// @param {String} $placement [before] - before|after
@mixin _oFtIconsStandardsIcon($icon-class, $character-code, $placement: 'before') {
	$icon-selectors: oFtIconsGetSelectors("#{$icon-class}:#{$placement}");
	#{$icon-selectors} {
		// Escaping in Sass is a bit of a mess…
		// https://github.com/sass/sass/issues/659
		@if function-exists(selector-nest) {
			// Sass 3.4
			content: #{'\"\\' + $character-code + "\""};
		} @else {
			// LibSass
			// Escaping:
			// https://github.com/sass/libsass/issues/1271
			//
			// Outputs a unicode entity instead of a code such as "\f102":
			// https://github.com/sass/libsass/issues/1231
			content: "#{'\"\\' + $character-code + "\""}";
		}
	}
}

/// Placeholder (and optionally concrete class) for individual icon (IE7 hack)
///
/// @access private
///
/// @param {String} icon-class
/// @param {String} character-code - Unicode character code (e.g. f101)
@mixin _oFtIconsIe7Icon($icon-class, $character-code) {
	$icon-selectors: oFtIconsGetSelectors($icon-class);
	#{$icon-selectors} {
		// Weird way of writing this so that Libsass can read it…
		#{unquote('*') + zoom}: unquote("expression(this.runtimeStyle['zoom'] = '1', this.innerHTML = ") + "'&#x#{$character-code};&nbsp;'" + unquote(")");
	}
}

/// Icon styles for $icon-name
///
/// @param {String} icon-name
/// @param {String} character-code - Unicode character code (e.g. f101)
@mixin oFtIconsIcon($icon-name, $character-code) {
	@include _oFtIconsIe7Icon(icon--#{$icon-name}, $character-code);
	@include _oFtIconsStandardsIcon(icon--#{$icon-name}, $character-code);
	@include _oFtIconsStandardsIcon(icon--#{$icon-name}--after, $character-code, after);
}


@mixin oFtIconsGetSvg($icon-name, $color: null, $container-width: 20, $container-height: null, $apply-base-styles: true) {
	$service-url: "https://image.webservices.ft.com/v1/images/raw/fticon:#{$icon-name}";
	$query: "?source=ofticons";

	@if $color != null {
		$color: str-slice(ie-hex-str($color), 4);
		$query: $query + "&tint=%23#{$color},%23#{$color}";
	}

	@if ($o-ft-icons-use-local-assets == true and $color == null) {
		background-image: url(oAssetsResolve("svg/#{$icon-name}.svg", o-ft-icons));
	} @else {
		background-image: url($service-url + $query + "&format=svg");
	}

	// ie7/8 fallback. Uses the `\9` selector hack to target ie6-8.
	// Hack is documented here: http://browserhacks.com/#hack-ab1bcc7b3a6544c99260f7608f8e845e
	// It still needs to use the build service  <-- what does this comment mean?
	background-image: url($service-url + $query + "&format=png&width=#{$container-width}")\9;

	@if ($apply-base-styles == true) {
		display: inline-block;
		width: $container-width + 0px;
		@if ($container-height == null) {
			$container-height: $container-width;
		}
		height: $container-height + 0px;
		background-repeat: no-repeat;

		// Doesn't work in ie8/7/6 in these cases the icon will fill the available space,
		// which is fine if the containing box is the same shape as the icon (which they mostly will be)
		background-size: contain;
		background-position: 50%;
		background-color: transparent;
		vertical-align: middle;
	}
}
